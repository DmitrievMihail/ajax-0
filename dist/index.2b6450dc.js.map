{"mappings":"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","sources":["ajax0/index.js"],"sourcesContent":["const citiesListHTML = document.getElementById('citiesList');\nconst cities = []; // список городов\nconst weather = localStorage.hasOwnProperty('weather') ? JSON.parse(localStorage.getItem('weather')) : []; // Главный массив погоды\nconst outputHTML = document.getElementById('output'); // тег для вывода информации\nconst cityHTML = document.getElementById('city');\nconst submit = document.getElementById('submit');\nconst form = document.getElementById('form');\nconst debug = true; // Включение отладки\nconst errors = {\n    noError: 0,\n    errorLoadingCities: 1,\n    errorCountCities: 2,\n};\nconst errorsMsgList = [\n    'Ошибки отсутствуют',\n    'При загрузке городов и их координат произошла сетевая ошибка',\n    'Неверный формат ответа сервера',\n];\n\nconst rusLetters = new Map(); // Русские символы для сверки названий городов (для идиотского API)\n'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ абвгдеёжзийклмнопрстуфхцчшщьыъэюя'.split('').forEach((char) => {\n    rusLetters.set(char, char.codePointAt(0));\n});\n\nfunction createOptionsSelector(resp) {\n    const cities = generateCityList(resp);\n    debug && console.log('Загружено городов', cities.length);\n    if (!cities.length) {\n        throw new Error(); // Загрузили какую-то фигню а не города, вываливаемся в errorLoadingCities\n    }\n    // Заполняем список городов для работы инпута\n    cities.forEach((cityObj) => {\n        const option = document.createElement('option');\n        option.value = cityObj.name;\n        citiesListHTML.appendChild(option);\n    });\n}\n\ncityHTML.disabled = true;\nsubmit.disabled = true;\n\n// Настройки для API-сервера\nconst APIoptions = {\n    method: 'GET',\n    headers: {\n        'X-RapidAPI-Key': '64e6599f99msh772610806e4b56ep19a156jsnd6d623b769f8',\n        'X-RapidAPI-Host': 'city-list.p.rapidapi.com',\n    },\n};\n\ndebug && console.log('Идёт загрузка городов');\n// Загрузка списка городов с географическими координатами через API\n// TODO заменить нафиг этот сервис - треть городов нету, треть с орфографическими ошибками\n\nfetch('https://city-list.p.rapidapi.com/api/getCity/ru', APIoptions)\n    .then((response) => response.json())\n    .then((response) => createOptionsSelector(response[0]))\n    .catch(() => errorLoadingCities());\n\nfunction errorLoadingCities() {\n    // TODO убрать innerHTML\n    form.innerHTML =\n        `<h1>Произошла ошибка</h1><b>Ошибка загрузки городов</b>.<br>` +\n        `<br><span style='color:red;'>Прогноз погоды предоставить невозможно</span><br><br><b><a href=\"#\">Обновите страницу</b>`;\n    throw new Error('Ошибка загрузки городов');\n}\n\nfunction generateCityList(response) {\n    for (const key in response) {\n        if (response[key].level.slice(0, 3) === 'ADM' || response[key].population < 10000) {\n            // отбрасываем административные единицы (не города) и пункты с населением менее 10тыс\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        let cityNameRu = response[key].name;\n        // Этот большой цикл - пытается вытащить русское название\n        // (сервер английские, русские и даже китайские вперемешку шлёт)\n        for (const cityName of JSON.parse(response[key].alternames)) {\n            let rusLng = true;\n            if (cityName) {\n                for (const char of cityName) {\n                    if (!rusLetters.has(char)) {\n                        rusLng = false;\n                        // eslint-disable-next-line no-continue\n                        continue;\n                    }\n                }\n            }\n            if (rusLng && cityName) {\n                cityNameRu = cityName;\n                break;\n            }\n        }\n\n        cities.push({\n            name: cityNameRu, // + \" \" + response[key].level,\n            lat: response[key].lat,\n            long: response[key].long,\n            population: response[key].population,\n        });\n    }\n\n    cityHTML.disabled = false;\n    submit.disabled = false;\n\n    return cities;\n}\n\nfunction errorLoadingWether() {\n    // TODO убрать innerHTML\n    cityHTML.disabled = false;\n    submit.disabled = false;\n\n    outputHTML.innerHTML =\n        '<b style=\"color:red;\">Ошибка загрузки погоды.</b><br><br> Попробуйте позднее или выберите другой город';\n    throw new Error('Ошибка получения погоды.');\n}\n\nasync function loadWether(cityIndex) {\n    const APIoptions = {\n        method: 'GET',\n        headers: {\n            'X-RapidAPI-Key': '64e6599f99msh772610806e4b56ep19a156jsnd6d623b769f8',\n            'X-RapidAPI-Host': 'weatherbit-v1-mashape.p.rapidapi.com',\n        },\n    };\n\n    const response = await fetch(\n        `https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly?lat=${cities[cityIndex].lat}&lon=${cities[cityIndex].long}&lang=ru`,\n        APIoptions\n    )\n        .then((response) => response.json())\n        .catch(() => errorLoadingWether());\n\n    // Получили результат - записали в сторадж\n    weather[cityIndex] = response;\n    localStorage.setItem('weather', JSON.stringify(weather));\n    outputHTML.innerHTML += '<br>Данные получены';\n    debug && console.log('Погода пришла');\n}\n\nform.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    cityHTML.disabled = true;\n    submit.disabled = true;\n    outputHTML.innerHTML = '';\n    debug && console.log('Начинаем обработку');\n    // eslint-disable-next-line eqeqeq\n    const cityIndex = cities.findIndex((el) => el.name == cityHTML.value);\n    debug && console.log('Индекс города', cityIndex);\n    if (cityIndex !== -1) {\n        if (!weather[cityIndex]) {\n            // Погоду ранее не получали, значит надо идти на сервер\n            debug && console.log('Идём за погодой на сервер');\n            await loadWether(cityIndex);\n        }\n        // Получены все данные. Рисуем прогноз погоды.\n\n        // Поля для итерации\n        const fields = {\n            // eslint-disable-next-line camelcase\n            timestamp_local: 'Дата/время (местные)', // здесь и далее camelcase приходит свыше\n            temp: 'Температура',\n            // eslint-disable-next-line camelcase\n            app_temp: 'Ощущается как',\n            // eslint-disable-next-line camelcase\n            wind_cdir_full: 'Направление ветра',\n            // eslint-disable-next-line camelcase\n            wind_spd: 'Скорость ветра',\n            'weather*description': 'Явления', // Звёздачка как разделитель полей (вложенный JSON)\n            clouds: 'Процент облачности',\n        };\n\n        // TODO  сделать вывод по-человечески, а не через innerHTML\n        let html = `<h3>Прогноз погоды по городу <span style=\"color:blue\">${cities[cityIndex].name}</span></h3>`;\n        if (!weather[cityIndex] || !weather[cityIndex].data) {\n            html += '<b style=\"color:red\">Прогноз недоступен, попробуйте узнать погоду позднее или выберите другой город</b>';\n            debug && console.log('Погоды нету');\n        } else {\n            debug && console.log('Погода есть, рисуем таблицу');\n            html += '<table border=1><tr>';\n            for (const field in fields) {\n                html += `\\n<th>${fields[field]}</th>`;\n            }\n            html += '</tr>';\n            for (const currentWeather of weather[cityIndex].data) {\n                html += '\\n<tr style=\"text-align:center;\">';\n                for (const field in fields) {\n                    if (field.indexOf('*') === -1) {\n                        html += `\\n<td>${currentWeather[field]}</td>`;\n                    } else {\n                        const subfields = field.split('*');\n                        html += `\\n<td>${currentWeather[subfields[0]][subfields[1]]}</td>`;\n                    }\n                }\n                html += '\\n</tr>';\n            }\n            html += '\\n</table>';\n        }\n\n        outputHTML.innerHTML = html;\n        cityHTML.disabled = false;\n        submit.disabled = false;\n    }\n});\n"],"names":[],"version":3,"file":"index.2b6450dc.js.map","sourceRoot":"/__parcel_source_root/"}